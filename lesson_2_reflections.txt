What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository, it creates a hidden file .git that will track the changes in the folder. It needs to be done to start tracking files. 


How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is a non-permanent space to add files to before commiting them to the repository. It offers the possibility to think (and make mistakes & fix them) about how to organise a commit around a logical unit.

How can you use the staging area to make sure you have one commit per logical change?

	The staging area can be used to verify the changes that are just about to be committed compared to the last commit with git diff --staged. That gives the ability to make sure what changes are being commited. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches would be helpful if I'm working on a feature that I want to develop fully to test it, but I'm not sure if I want to integrate those changes completely. I would then use a branch to make all my tests, without putting my already functionning code in jeopardy. 

How do the diagrams help you visualize the branch structure?

	Diagrams let me see how parent commits are organized, and see where commits would be lost (if they're not on a branch). 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	The result of merging two branches together is to take all changes from the two branches and make it into one single code. 
	It's represented like it is in the diagram, because it joins all the changes from the two branches into one point. 

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

	Automatic merging is a quick way to working collaboratively on codes in different sections without having to find changes by hand.





